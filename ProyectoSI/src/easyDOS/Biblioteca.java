/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package easyDOS;

import java.awt.Cursor;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.awt.event.WindowEvent;
import java.awt.event.WindowListener;
import java.awt.image.BufferedImage;
import java.io.BufferedReader;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.IOException;
import java.util.ArrayList;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.ImageIcon;
import javax.swing.JLabel;
import static javax.swing.WindowConstants.DISPOSE_ON_CLOSE;
import javax.swing.border.Border;
import javax.swing.border.CompoundBorder;
import javax.swing.border.EmptyBorder;
import easyDOS.Auxiliares;

/**
 *
 * @author josel
 */
public class Biblioteca extends javax.swing.JPanel {

    private ArrayList<Object> _listaJuegos = new ArrayList<>(); //Usamos un arrayList para almacenas las rutas de imagenes
    private final ArrayList<Object> _listaJuegosUsuario = new ArrayList<>(); //Usamos un arrayList para almacenas las rutas de imagenes de usuario
    Auxiliares aux = new Auxiliares();

    /**
     * Creates new form Biblioteca2
     */
    public Biblioteca() {

        initComponents();
        try {
            lectura_fichero();
        } catch (IOException ex) {
            Logger.getLogger(Biblioteca.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel2 = new javax.swing.JLabel();

        setBackground(new java.awt.Color(51, 51, 51));
        setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(51, 51, 51)));
        setForeground(new java.awt.Color(51, 51, 51));
        setLayout(new java.awt.GridBagLayout());

        jLabel2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/AddGameUnknown.png"))); // NOI18N
        add(jLabel2, new java.awt.GridBagConstraints());
    }// </editor-fold>//GEN-END:initComponents

    void crearBiblioteca() {

        setLayout(new java.awt.GridLayout((int) _listaJuegos.size() / 3, 4)); //Establecemos la rejilla a size/4, 4
        BufferedImage img = aux.loadImage("/img/AddGameUnknown.png");
        ImageIcon icon = new ImageIcon(img);

        JLabel label = new JLabel(icon);
        Border border = label.getBorder();
        Border margin = new EmptyBorder(2, 2, 2, 2);
        label.setBorder(new CompoundBorder(border, margin));
        label.setToolTipText("Crear mi propia plantilla.");
        label.setCursor(Cursor.getPredefinedCursor(Cursor.HAND_CURSOR));
        //Permite abrir la información del juego añadiendo un eventListener
        label.addMouseListener(new MouseAdapter() {
            @Override
            public void mouseClicked(MouseEvent me) {
                InfoJuego frame = new InfoJuego(new Juego(), false);
                frame.setVisible(true);
                frame.setTitle("Plantilla por defecto");
                frame.setDefaultCloseOperation(DISPOSE_ON_CLOSE);
                frame.addWindowListener(new WindowListener() {
                    @Override
                    public void windowClosed(WindowEvent e) {
                        //Si se ha cerrado la ventana
                        try {
                            _listaJuegos.clear();
                            _listaJuegosUsuario.clear();
                            lectura_fichero();
                            crearBiblioteca(); //Genero la biblioteca
                            getParent().getParent().getParent().setVisible(false);
                        } catch (IOException ex) {
                            Logger.getLogger(Biblioteca.class.getName()).log(Level.SEVERE, null, ex);
                        }
                    }

                    //Funciones de ventana no usadas para nuestro problema
                    @Override
                    public void windowIconified(WindowEvent e) {
                    }

                    @Override
                    public void windowOpened(WindowEvent e) {
                    }

                    @Override
                    public void windowClosing(WindowEvent e) {
                    }

                    @Override
                    public void windowDeiconified(WindowEvent e) {
                    }

                    @Override
                    public void windowActivated(WindowEvent e) {
                    }

                    @Override
                    public void windowDeactivated(WindowEvent e) {
                    }

                });
            }
        });
        this.add(label);

        for (int i = 0; i < _listaJuegos.size(); ++i) {
            Juego g = (Juego) _listaJuegos.get(i);
            img = aux.loadImage(g.getImagen());
            icon = new ImageIcon(img);
            label = new JLabel(icon);
            label.setBorder(new CompoundBorder(border, margin));
            label.setToolTipText("Plantilla para juego " + g.getNombre());
            //Permite abrir la información del juego añadiendo un eventListener
            label.setCursor(Cursor.getPredefinedCursor(Cursor.HAND_CURSOR));
            label.addMouseListener(new MouseAdapter() {
                @Override
                public void mouseClicked(MouseEvent me) {
                    InfoJuego frame = new InfoJuego(g, false);
                    frame.setVisible(true);
                    frame.setTitle("Información " + g.getNombre());
                    frame.setDefaultCloseOperation(DISPOSE_ON_CLOSE);
                    frame.addWindowListener(new WindowListener() {
                        @Override
                        public void windowClosed(WindowEvent e) {
                            //Si se ha cerrado la ventana
                            try {
                                _listaJuegos.clear();
                                _listaJuegosUsuario.clear();
                                lectura_fichero();
                                crearBiblioteca(); //Genero la biblioteca
                                getParent().getParent().getParent().setVisible(false);
                            } catch (IOException ex) {
                                Logger.getLogger(Biblioteca.class.getName()).log(Level.SEVERE, null, ex);
                            }
                        }

                        //Funciones de ventana no usadas para nuestro problema
                        @Override
                        public void windowIconified(WindowEvent e) {
                        }

                        @Override
                        public void windowOpened(WindowEvent e) {
                        }

                        @Override
                        public void windowClosing(WindowEvent e) {
                        }

                        @Override
                        public void windowDeiconified(WindowEvent e) {
                        }

                        @Override
                        public void windowActivated(WindowEvent e) {
                        }

                        @Override
                        public void windowDeactivated(WindowEvent e) {
                        }

                    });
                }
            });
            this.add(label);

        }
        removeDuplicates();
    }

    void getMisJuegos() throws FileNotFoundException, IOException {
        setLayout(new java.awt.GridLayout((int) _listaJuegosUsuario.size() / 2, 4)); //Establecemos la rejilla a size/4, 4
        ImageIcon icon;
        BufferedImage img;
        for (int i = 0; i < _listaJuegosUsuario.size(); ++i) {
            Juego g = (Juego) _listaJuegosUsuario.get(i);
            img = aux.loadImage(g.getImagen());
            icon = new ImageIcon(img);
            JLabel label = new JLabel(icon);
            Border border = label.getBorder();
            Border margin = new EmptyBorder(2, 2, 2, 2);
            label.setBorder(new CompoundBorder(border, margin));
            label.setCursor(Cursor.getPredefinedCursor(Cursor.HAND_CURSOR));
            //Permite abrir la información del juego añadiendo un eventListener
            label.setToolTipText("Juego " + g.getNombre());
            label.addMouseListener(new MouseAdapter() {
                @Override
                public void mouseClicked(MouseEvent me) {
                    InfoJuego frame = new InfoJuego(g, true);
                    frame.setVisible(true);
                    frame.setTitle("Información " + g.getNombre());
                    frame.setDefaultCloseOperation(DISPOSE_ON_CLOSE);
                    frame.addWindowListener(new WindowListener() {
                        @Override
                        public void windowClosed(WindowEvent e) {
                            //Si se ha cerrado la ventana
                            try {
                                _listaJuegos.clear();
                                _listaJuegosUsuario.clear();
                                lectura_fichero();
                                crearBiblioteca(); //Genero la biblioteca
                                getParent().getParent().getParent().setVisible(false);
                            } catch (IOException ex) {
                                Logger.getLogger(Biblioteca.class.getName()).log(Level.SEVERE, null, ex);
                            }
                        }

                        //Funciones de ventana no usadas para nuestro problema
                        @Override
                        public void windowIconified(WindowEvent e) {
                        }

                        @Override
                        public void windowOpened(WindowEvent e) {
                        }

                        @Override
                        public void windowClosing(WindowEvent e) {
                        }

                        @Override
                        public void windowDeiconified(WindowEvent e) {
                        }

                        @Override
                        public void windowActivated(WindowEvent e) {
                        }

                        @Override
                        public void windowDeactivated(WindowEvent e) {
                        }

                    });
                }
            });
            add(label);
        }
    }

    int hasGame(String nombreJuego, ArrayList listado) {
        for (int i = 0; i < listado.size(); i++) {
            Juego g = (Juego) listado.get(i);
            if (g.getNombre().equals(nombreJuego)) {
                return i;
            }
        }
        return -1;
    }

    void lectura_fichero() throws FileNotFoundException, IOException {
        //Lectura del fichero de listado de juegos        
        String file = new java.io.File(".").getCanonicalPath();
        file = file.replace("\\", "/");
        file = file + "/Juegos/listado_juegos.txt";

        FileReader f = new FileReader(file);
        BufferedReader b = new BufferedReader(f);
        String cadena = b.readLine();
        int id = 0;
        while (cadena != null) {
            String Nombre = cadena.replaceAll("[^\\dA-Za-z() ]", "");
            String Compania = b.readLine();
            String Desarrollador = b.readLine();
            String Tipo = b.readLine();
            String Descrip = b.readLine();
            String imagen = b.readLine();
            Juego game = new Juego(id, Nombre, Desarrollador, Compania, Tipo, Descrip, imagen);
            id++;
            _listaJuegos.add(game);
            cadena = b.readLine();
        }
        b.close();

        String[] division;
        String NombreJuego, fileDefault = new java.io.File(".").getCanonicalPath();
        fileDefault = fileDefault.replace("\\", "/");
        fileDefault = fileDefault + "/Juegos/default.txt";

        f = new FileReader(fileDefault);
        b = new BufferedReader(f);
        while ((NombreJuego = b.readLine()) != null) {
            division = NombreJuego.split(",");
            int response = hasGame(division[0].replaceAll("[^\\dA-Za-z() ]", ""), _listaJuegos);
            if (response >= 0) {
                Juego game = (Juego) _listaJuegos.get(response);
                game.setUrl(division[1]);
                _listaJuegosUsuario.add(game);
            }
        }
        b.close();
        removeDuplicates();
    }

    void removeDuplicates() {
        ArrayList<Object> _listaAux = new ArrayList<>();
        //Elimino los juegos de la biblioteca que ya haya adquirido el usuario
        for (int j = 0; j < _listaJuegos.size(); j++) {
            Juego game = (Juego) _listaJuegos.get(j);
            if (hasGame(game.getNombre(), _listaJuegosUsuario) == -1) {
                _listaAux.add(game);
            }
        }
        //Limpio la lista y clono con la
        _listaJuegos.clear();
        _listaJuegos = (ArrayList<Object>) _listaAux.clone();
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel jLabel2;
    // End of variables declaration//GEN-END:variables
}
